#[test]
fn set_u128() {
use crate::{bit_u128::*, BitOp as _};
    let mut x = 0u128;
    x = 0;
    x.set(B0);
    assert!(B0 == x);
    x.set(B0);
    assert!(B0 == x);
    x = 0;
    x.set(B1);
    assert!(B1 == x);
    x.set(B1);
    assert!(B1 == x);
    x = 0;
    x.set(B2);
    assert!(B2 == x);
    x.set(B2);
    assert!(B2 == x);
    x = 0;
    x.set(B3);
    assert!(B3 == x);
    x.set(B3);
    assert!(B3 == x);
    x = 0;
    x.set(B4);
    assert!(B4 == x);
    x.set(B4);
    assert!(B4 == x);
    x = 0;
    x.set(B5);
    assert!(B5 == x);
    x.set(B5);
    assert!(B5 == x);
    x = 0;
    x.set(B6);
    assert!(B6 == x);
    x.set(B6);
    assert!(B6 == x);
    x = 0;
    x.set(B7);
    assert!(B7 == x);
    x.set(B7);
    assert!(B7 == x);
    x = 0;
    x.set(B8);
    assert!(B8 == x);
    x.set(B8);
    assert!(B8 == x);
    x = 0;
    x.set(B9);
    assert!(B9 == x);
    x.set(B9);
    assert!(B9 == x);
    x = 0;
    x.set(B10);
    assert!(B10 == x);
    x.set(B10);
    assert!(B10 == x);
    x = 0;
    x.set(B11);
    assert!(B11 == x);
    x.set(B11);
    assert!(B11 == x);
    x = 0;
    x.set(B12);
    assert!(B12 == x);
    x.set(B12);
    assert!(B12 == x);
    x = 0;
    x.set(B13);
    assert!(B13 == x);
    x.set(B13);
    assert!(B13 == x);
    x = 0;
    x.set(B14);
    assert!(B14 == x);
    x.set(B14);
    assert!(B14 == x);
    x = 0;
    x.set(B15);
    assert!(B15 == x);
    x.set(B15);
    assert!(B15 == x);
    x = 0;
    x.set(B16);
    assert!(B16 == x);
    x.set(B16);
    assert!(B16 == x);
    x = 0;
    x.set(B17);
    assert!(B17 == x);
    x.set(B17);
    assert!(B17 == x);
    x = 0;
    x.set(B18);
    assert!(B18 == x);
    x.set(B18);
    assert!(B18 == x);
    x = 0;
    x.set(B19);
    assert!(B19 == x);
    x.set(B19);
    assert!(B19 == x);
    x = 0;
    x.set(B20);
    assert!(B20 == x);
    x.set(B20);
    assert!(B20 == x);
    x = 0;
    x.set(B21);
    assert!(B21 == x);
    x.set(B21);
    assert!(B21 == x);
    x = 0;
    x.set(B22);
    assert!(B22 == x);
    x.set(B22);
    assert!(B22 == x);
    x = 0;
    x.set(B23);
    assert!(B23 == x);
    x.set(B23);
    assert!(B23 == x);
    x = 0;
    x.set(B24);
    assert!(B24 == x);
    x.set(B24);
    assert!(B24 == x);
    x = 0;
    x.set(B25);
    assert!(B25 == x);
    x.set(B25);
    assert!(B25 == x);
    x = 0;
    x.set(B26);
    assert!(B26 == x);
    x.set(B26);
    assert!(B26 == x);
    x = 0;
    x.set(B27);
    assert!(B27 == x);
    x.set(B27);
    assert!(B27 == x);
    x = 0;
    x.set(B28);
    assert!(B28 == x);
    x.set(B28);
    assert!(B28 == x);
    x = 0;
    x.set(B29);
    assert!(B29 == x);
    x.set(B29);
    assert!(B29 == x);
    x = 0;
    x.set(B30);
    assert!(B30 == x);
    x.set(B30);
    assert!(B30 == x);
    x = 0;
    x.set(B31);
    assert!(B31 == x);
    x.set(B31);
    assert!(B31 == x);
    x = 0;
    x.set(B32);
    assert!(B32 == x);
    x.set(B32);
    assert!(B32 == x);
    x = 0;
    x.set(B33);
    assert!(B33 == x);
    x.set(B33);
    assert!(B33 == x);
    x = 0;
    x.set(B34);
    assert!(B34 == x);
    x.set(B34);
    assert!(B34 == x);
    x = 0;
    x.set(B35);
    assert!(B35 == x);
    x.set(B35);
    assert!(B35 == x);
    x = 0;
    x.set(B36);
    assert!(B36 == x);
    x.set(B36);
    assert!(B36 == x);
    x = 0;
    x.set(B37);
    assert!(B37 == x);
    x.set(B37);
    assert!(B37 == x);
    x = 0;
    x.set(B38);
    assert!(B38 == x);
    x.set(B38);
    assert!(B38 == x);
    x = 0;
    x.set(B39);
    assert!(B39 == x);
    x.set(B39);
    assert!(B39 == x);
    x = 0;
    x.set(B40);
    assert!(B40 == x);
    x.set(B40);
    assert!(B40 == x);
    x = 0;
    x.set(B41);
    assert!(B41 == x);
    x.set(B41);
    assert!(B41 == x);
    x = 0;
    x.set(B42);
    assert!(B42 == x);
    x.set(B42);
    assert!(B42 == x);
    x = 0;
    x.set(B43);
    assert!(B43 == x);
    x.set(B43);
    assert!(B43 == x);
    x = 0;
    x.set(B44);
    assert!(B44 == x);
    x.set(B44);
    assert!(B44 == x);
    x = 0;
    x.set(B45);
    assert!(B45 == x);
    x.set(B45);
    assert!(B45 == x);
    x = 0;
    x.set(B46);
    assert!(B46 == x);
    x.set(B46);
    assert!(B46 == x);
    x = 0;
    x.set(B47);
    assert!(B47 == x);
    x.set(B47);
    assert!(B47 == x);
    x = 0;
    x.set(B48);
    assert!(B48 == x);
    x.set(B48);
    assert!(B48 == x);
    x = 0;
    x.set(B49);
    assert!(B49 == x);
    x.set(B49);
    assert!(B49 == x);
    x = 0;
    x.set(B50);
    assert!(B50 == x);
    x.set(B50);
    assert!(B50 == x);
    x = 0;
    x.set(B51);
    assert!(B51 == x);
    x.set(B51);
    assert!(B51 == x);
    x = 0;
    x.set(B52);
    assert!(B52 == x);
    x.set(B52);
    assert!(B52 == x);
    x = 0;
    x.set(B53);
    assert!(B53 == x);
    x.set(B53);
    assert!(B53 == x);
    x = 0;
    x.set(B54);
    assert!(B54 == x);
    x.set(B54);
    assert!(B54 == x);
    x = 0;
    x.set(B55);
    assert!(B55 == x);
    x.set(B55);
    assert!(B55 == x);
    x = 0;
    x.set(B56);
    assert!(B56 == x);
    x.set(B56);
    assert!(B56 == x);
    x = 0;
    x.set(B57);
    assert!(B57 == x);
    x.set(B57);
    assert!(B57 == x);
    x = 0;
    x.set(B58);
    assert!(B58 == x);
    x.set(B58);
    assert!(B58 == x);
    x = 0;
    x.set(B59);
    assert!(B59 == x);
    x.set(B59);
    assert!(B59 == x);
    x = 0;
    x.set(B60);
    assert!(B60 == x);
    x.set(B60);
    assert!(B60 == x);
    x = 0;
    x.set(B61);
    assert!(B61 == x);
    x.set(B61);
    assert!(B61 == x);
    x = 0;
    x.set(B62);
    assert!(B62 == x);
    x.set(B62);
    assert!(B62 == x);
    x = 0;
    x.set(B63);
    assert!(B63 == x);
    x.set(B63);
    assert!(B63 == x);
    x = 0;
    x.set(B64);
    assert!(B64 == x);
    x.set(B64);
    assert!(B64 == x);
    x = 0;
    x.set(B65);
    assert!(B65 == x);
    x.set(B65);
    assert!(B65 == x);
    x = 0;
    x.set(B66);
    assert!(B66 == x);
    x.set(B66);
    assert!(B66 == x);
    x = 0;
    x.set(B67);
    assert!(B67 == x);
    x.set(B67);
    assert!(B67 == x);
    x = 0;
    x.set(B68);
    assert!(B68 == x);
    x.set(B68);
    assert!(B68 == x);
    x = 0;
    x.set(B69);
    assert!(B69 == x);
    x.set(B69);
    assert!(B69 == x);
    x = 0;
    x.set(B70);
    assert!(B70 == x);
    x.set(B70);
    assert!(B70 == x);
    x = 0;
    x.set(B71);
    assert!(B71 == x);
    x.set(B71);
    assert!(B71 == x);
    x = 0;
    x.set(B72);
    assert!(B72 == x);
    x.set(B72);
    assert!(B72 == x);
    x = 0;
    x.set(B73);
    assert!(B73 == x);
    x.set(B73);
    assert!(B73 == x);
    x = 0;
    x.set(B74);
    assert!(B74 == x);
    x.set(B74);
    assert!(B74 == x);
    x = 0;
    x.set(B75);
    assert!(B75 == x);
    x.set(B75);
    assert!(B75 == x);
    x = 0;
    x.set(B76);
    assert!(B76 == x);
    x.set(B76);
    assert!(B76 == x);
    x = 0;
    x.set(B77);
    assert!(B77 == x);
    x.set(B77);
    assert!(B77 == x);
    x = 0;
    x.set(B78);
    assert!(B78 == x);
    x.set(B78);
    assert!(B78 == x);
    x = 0;
    x.set(B79);
    assert!(B79 == x);
    x.set(B79);
    assert!(B79 == x);
    x = 0;
    x.set(B80);
    assert!(B80 == x);
    x.set(B80);
    assert!(B80 == x);
    x = 0;
    x.set(B81);
    assert!(B81 == x);
    x.set(B81);
    assert!(B81 == x);
    x = 0;
    x.set(B82);
    assert!(B82 == x);
    x.set(B82);
    assert!(B82 == x);
    x = 0;
    x.set(B83);
    assert!(B83 == x);
    x.set(B83);
    assert!(B83 == x);
    x = 0;
    x.set(B84);
    assert!(B84 == x);
    x.set(B84);
    assert!(B84 == x);
    x = 0;
    x.set(B85);
    assert!(B85 == x);
    x.set(B85);
    assert!(B85 == x);
    x = 0;
    x.set(B86);
    assert!(B86 == x);
    x.set(B86);
    assert!(B86 == x);
    x = 0;
    x.set(B87);
    assert!(B87 == x);
    x.set(B87);
    assert!(B87 == x);
    x = 0;
    x.set(B88);
    assert!(B88 == x);
    x.set(B88);
    assert!(B88 == x);
    x = 0;
    x.set(B89);
    assert!(B89 == x);
    x.set(B89);
    assert!(B89 == x);
    x = 0;
    x.set(B90);
    assert!(B90 == x);
    x.set(B90);
    assert!(B90 == x);
    x = 0;
    x.set(B91);
    assert!(B91 == x);
    x.set(B91);
    assert!(B91 == x);
    x = 0;
    x.set(B92);
    assert!(B92 == x);
    x.set(B92);
    assert!(B92 == x);
    x = 0;
    x.set(B93);
    assert!(B93 == x);
    x.set(B93);
    assert!(B93 == x);
    x = 0;
    x.set(B94);
    assert!(B94 == x);
    x.set(B94);
    assert!(B94 == x);
    x = 0;
    x.set(B95);
    assert!(B95 == x);
    x.set(B95);
    assert!(B95 == x);
    x = 0;
    x.set(B96);
    assert!(B96 == x);
    x.set(B96);
    assert!(B96 == x);
    x = 0;
    x.set(B97);
    assert!(B97 == x);
    x.set(B97);
    assert!(B97 == x);
    x = 0;
    x.set(B98);
    assert!(B98 == x);
    x.set(B98);
    assert!(B98 == x);
    x = 0;
    x.set(B99);
    assert!(B99 == x);
    x.set(B99);
    assert!(B99 == x);
    x = 0;
    x.set(B100);
    assert!(B100 == x);
    x.set(B100);
    assert!(B100 == x);
    x = 0;
    x.set(B101);
    assert!(B101 == x);
    x.set(B101);
    assert!(B101 == x);
    x = 0;
    x.set(B102);
    assert!(B102 == x);
    x.set(B102);
    assert!(B102 == x);
    x = 0;
    x.set(B103);
    assert!(B103 == x);
    x.set(B103);
    assert!(B103 == x);
    x = 0;
    x.set(B104);
    assert!(B104 == x);
    x.set(B104);
    assert!(B104 == x);
    x = 0;
    x.set(B105);
    assert!(B105 == x);
    x.set(B105);
    assert!(B105 == x);
    x = 0;
    x.set(B106);
    assert!(B106 == x);
    x.set(B106);
    assert!(B106 == x);
    x = 0;
    x.set(B107);
    assert!(B107 == x);
    x.set(B107);
    assert!(B107 == x);
    x = 0;
    x.set(B108);
    assert!(B108 == x);
    x.set(B108);
    assert!(B108 == x);
    x = 0;
    x.set(B109);
    assert!(B109 == x);
    x.set(B109);
    assert!(B109 == x);
    x = 0;
    x.set(B110);
    assert!(B110 == x);
    x.set(B110);
    assert!(B110 == x);
    x = 0;
    x.set(B111);
    assert!(B111 == x);
    x.set(B111);
    assert!(B111 == x);
    x = 0;
    x.set(B112);
    assert!(B112 == x);
    x.set(B112);
    assert!(B112 == x);
    x = 0;
    x.set(B113);
    assert!(B113 == x);
    x.set(B113);
    assert!(B113 == x);
    x = 0;
    x.set(B114);
    assert!(B114 == x);
    x.set(B114);
    assert!(B114 == x);
    x = 0;
    x.set(B115);
    assert!(B115 == x);
    x.set(B115);
    assert!(B115 == x);
    x = 0;
    x.set(B116);
    assert!(B116 == x);
    x.set(B116);
    assert!(B116 == x);
    x = 0;
    x.set(B117);
    assert!(B117 == x);
    x.set(B117);
    assert!(B117 == x);
    x = 0;
    x.set(B118);
    assert!(B118 == x);
    x.set(B118);
    assert!(B118 == x);
    x = 0;
    x.set(B119);
    assert!(B119 == x);
    x.set(B119);
    assert!(B119 == x);
    x = 0;
    x.set(B120);
    assert!(B120 == x);
    x.set(B120);
    assert!(B120 == x);
    x = 0;
    x.set(B121);
    assert!(B121 == x);
    x.set(B121);
    assert!(B121 == x);
    x = 0;
    x.set(B122);
    assert!(B122 == x);
    x.set(B122);
    assert!(B122 == x);
    x = 0;
    x.set(B123);
    assert!(B123 == x);
    x.set(B123);
    assert!(B123 == x);
    x = 0;
    x.set(B124);
    assert!(B124 == x);
    x.set(B124);
    assert!(B124 == x);
    x = 0;
    x.set(B125);
    assert!(B125 == x);
    x.set(B125);
    assert!(B125 == x);
    x = 0;
    x.set(B126);
    assert!(B126 == x);
    x.set(B126);
    assert!(B126 == x);
    x = 0;
    x.set(B127);
    assert!(B127 == x);
    x.set(B127);
    assert!(B127 == x);
}

#[test]
fn set_u64() {
use crate::{bit_u64::*, BitOp as _};
    let mut x = 0u64;
    x = 0;
    x.set(B0);
    assert!(B0 == x);
    x.set(B0);
    assert!(B0 == x);
    x = 0;
    x.set(B1);
    assert!(B1 == x);
    x.set(B1);
    assert!(B1 == x);
    x = 0;
    x.set(B2);
    assert!(B2 == x);
    x.set(B2);
    assert!(B2 == x);
    x = 0;
    x.set(B3);
    assert!(B3 == x);
    x.set(B3);
    assert!(B3 == x);
    x = 0;
    x.set(B4);
    assert!(B4 == x);
    x.set(B4);
    assert!(B4 == x);
    x = 0;
    x.set(B5);
    assert!(B5 == x);
    x.set(B5);
    assert!(B5 == x);
    x = 0;
    x.set(B6);
    assert!(B6 == x);
    x.set(B6);
    assert!(B6 == x);
    x = 0;
    x.set(B7);
    assert!(B7 == x);
    x.set(B7);
    assert!(B7 == x);
    x = 0;
    x.set(B8);
    assert!(B8 == x);
    x.set(B8);
    assert!(B8 == x);
    x = 0;
    x.set(B9);
    assert!(B9 == x);
    x.set(B9);
    assert!(B9 == x);
    x = 0;
    x.set(B10);
    assert!(B10 == x);
    x.set(B10);
    assert!(B10 == x);
    x = 0;
    x.set(B11);
    assert!(B11 == x);
    x.set(B11);
    assert!(B11 == x);
    x = 0;
    x.set(B12);
    assert!(B12 == x);
    x.set(B12);
    assert!(B12 == x);
    x = 0;
    x.set(B13);
    assert!(B13 == x);
    x.set(B13);
    assert!(B13 == x);
    x = 0;
    x.set(B14);
    assert!(B14 == x);
    x.set(B14);
    assert!(B14 == x);
    x = 0;
    x.set(B15);
    assert!(B15 == x);
    x.set(B15);
    assert!(B15 == x);
    x = 0;
    x.set(B16);
    assert!(B16 == x);
    x.set(B16);
    assert!(B16 == x);
    x = 0;
    x.set(B17);
    assert!(B17 == x);
    x.set(B17);
    assert!(B17 == x);
    x = 0;
    x.set(B18);
    assert!(B18 == x);
    x.set(B18);
    assert!(B18 == x);
    x = 0;
    x.set(B19);
    assert!(B19 == x);
    x.set(B19);
    assert!(B19 == x);
    x = 0;
    x.set(B20);
    assert!(B20 == x);
    x.set(B20);
    assert!(B20 == x);
    x = 0;
    x.set(B21);
    assert!(B21 == x);
    x.set(B21);
    assert!(B21 == x);
    x = 0;
    x.set(B22);
    assert!(B22 == x);
    x.set(B22);
    assert!(B22 == x);
    x = 0;
    x.set(B23);
    assert!(B23 == x);
    x.set(B23);
    assert!(B23 == x);
    x = 0;
    x.set(B24);
    assert!(B24 == x);
    x.set(B24);
    assert!(B24 == x);
    x = 0;
    x.set(B25);
    assert!(B25 == x);
    x.set(B25);
    assert!(B25 == x);
    x = 0;
    x.set(B26);
    assert!(B26 == x);
    x.set(B26);
    assert!(B26 == x);
    x = 0;
    x.set(B27);
    assert!(B27 == x);
    x.set(B27);
    assert!(B27 == x);
    x = 0;
    x.set(B28);
    assert!(B28 == x);
    x.set(B28);
    assert!(B28 == x);
    x = 0;
    x.set(B29);
    assert!(B29 == x);
    x.set(B29);
    assert!(B29 == x);
    x = 0;
    x.set(B30);
    assert!(B30 == x);
    x.set(B30);
    assert!(B30 == x);
    x = 0;
    x.set(B31);
    assert!(B31 == x);
    x.set(B31);
    assert!(B31 == x);
    x = 0;
    x.set(B32);
    assert!(B32 == x);
    x.set(B32);
    assert!(B32 == x);
    x = 0;
    x.set(B33);
    assert!(B33 == x);
    x.set(B33);
    assert!(B33 == x);
    x = 0;
    x.set(B34);
    assert!(B34 == x);
    x.set(B34);
    assert!(B34 == x);
    x = 0;
    x.set(B35);
    assert!(B35 == x);
    x.set(B35);
    assert!(B35 == x);
    x = 0;
    x.set(B36);
    assert!(B36 == x);
    x.set(B36);
    assert!(B36 == x);
    x = 0;
    x.set(B37);
    assert!(B37 == x);
    x.set(B37);
    assert!(B37 == x);
    x = 0;
    x.set(B38);
    assert!(B38 == x);
    x.set(B38);
    assert!(B38 == x);
    x = 0;
    x.set(B39);
    assert!(B39 == x);
    x.set(B39);
    assert!(B39 == x);
    x = 0;
    x.set(B40);
    assert!(B40 == x);
    x.set(B40);
    assert!(B40 == x);
    x = 0;
    x.set(B41);
    assert!(B41 == x);
    x.set(B41);
    assert!(B41 == x);
    x = 0;
    x.set(B42);
    assert!(B42 == x);
    x.set(B42);
    assert!(B42 == x);
    x = 0;
    x.set(B43);
    assert!(B43 == x);
    x.set(B43);
    assert!(B43 == x);
    x = 0;
    x.set(B44);
    assert!(B44 == x);
    x.set(B44);
    assert!(B44 == x);
    x = 0;
    x.set(B45);
    assert!(B45 == x);
    x.set(B45);
    assert!(B45 == x);
    x = 0;
    x.set(B46);
    assert!(B46 == x);
    x.set(B46);
    assert!(B46 == x);
    x = 0;
    x.set(B47);
    assert!(B47 == x);
    x.set(B47);
    assert!(B47 == x);
    x = 0;
    x.set(B48);
    assert!(B48 == x);
    x.set(B48);
    assert!(B48 == x);
    x = 0;
    x.set(B49);
    assert!(B49 == x);
    x.set(B49);
    assert!(B49 == x);
    x = 0;
    x.set(B50);
    assert!(B50 == x);
    x.set(B50);
    assert!(B50 == x);
    x = 0;
    x.set(B51);
    assert!(B51 == x);
    x.set(B51);
    assert!(B51 == x);
    x = 0;
    x.set(B52);
    assert!(B52 == x);
    x.set(B52);
    assert!(B52 == x);
    x = 0;
    x.set(B53);
    assert!(B53 == x);
    x.set(B53);
    assert!(B53 == x);
    x = 0;
    x.set(B54);
    assert!(B54 == x);
    x.set(B54);
    assert!(B54 == x);
    x = 0;
    x.set(B55);
    assert!(B55 == x);
    x.set(B55);
    assert!(B55 == x);
    x = 0;
    x.set(B56);
    assert!(B56 == x);
    x.set(B56);
    assert!(B56 == x);
    x = 0;
    x.set(B57);
    assert!(B57 == x);
    x.set(B57);
    assert!(B57 == x);
    x = 0;
    x.set(B58);
    assert!(B58 == x);
    x.set(B58);
    assert!(B58 == x);
    x = 0;
    x.set(B59);
    assert!(B59 == x);
    x.set(B59);
    assert!(B59 == x);
    x = 0;
    x.set(B60);
    assert!(B60 == x);
    x.set(B60);
    assert!(B60 == x);
    x = 0;
    x.set(B61);
    assert!(B61 == x);
    x.set(B61);
    assert!(B61 == x);
    x = 0;
    x.set(B62);
    assert!(B62 == x);
    x.set(B62);
    assert!(B62 == x);
    x = 0;
    x.set(B63);
    assert!(B63 == x);
    x.set(B63);
    assert!(B63 == x);
}

#[test]
fn set_u32() {
use crate::{bit_u32::*, BitOp as _};
    let mut x = 0u32;
    x = 0;
    x.set(B0);
    assert!(B0 == x);
    x.set(B0);
    assert!(B0 == x);
    x = 0;
    x.set(B1);
    assert!(B1 == x);
    x.set(B1);
    assert!(B1 == x);
    x = 0;
    x.set(B2);
    assert!(B2 == x);
    x.set(B2);
    assert!(B2 == x);
    x = 0;
    x.set(B3);
    assert!(B3 == x);
    x.set(B3);
    assert!(B3 == x);
    x = 0;
    x.set(B4);
    assert!(B4 == x);
    x.set(B4);
    assert!(B4 == x);
    x = 0;
    x.set(B5);
    assert!(B5 == x);
    x.set(B5);
    assert!(B5 == x);
    x = 0;
    x.set(B6);
    assert!(B6 == x);
    x.set(B6);
    assert!(B6 == x);
    x = 0;
    x.set(B7);
    assert!(B7 == x);
    x.set(B7);
    assert!(B7 == x);
    x = 0;
    x.set(B8);
    assert!(B8 == x);
    x.set(B8);
    assert!(B8 == x);
    x = 0;
    x.set(B9);
    assert!(B9 == x);
    x.set(B9);
    assert!(B9 == x);
    x = 0;
    x.set(B10);
    assert!(B10 == x);
    x.set(B10);
    assert!(B10 == x);
    x = 0;
    x.set(B11);
    assert!(B11 == x);
    x.set(B11);
    assert!(B11 == x);
    x = 0;
    x.set(B12);
    assert!(B12 == x);
    x.set(B12);
    assert!(B12 == x);
    x = 0;
    x.set(B13);
    assert!(B13 == x);
    x.set(B13);
    assert!(B13 == x);
    x = 0;
    x.set(B14);
    assert!(B14 == x);
    x.set(B14);
    assert!(B14 == x);
    x = 0;
    x.set(B15);
    assert!(B15 == x);
    x.set(B15);
    assert!(B15 == x);
    x = 0;
    x.set(B16);
    assert!(B16 == x);
    x.set(B16);
    assert!(B16 == x);
    x = 0;
    x.set(B17);
    assert!(B17 == x);
    x.set(B17);
    assert!(B17 == x);
    x = 0;
    x.set(B18);
    assert!(B18 == x);
    x.set(B18);
    assert!(B18 == x);
    x = 0;
    x.set(B19);
    assert!(B19 == x);
    x.set(B19);
    assert!(B19 == x);
    x = 0;
    x.set(B20);
    assert!(B20 == x);
    x.set(B20);
    assert!(B20 == x);
    x = 0;
    x.set(B21);
    assert!(B21 == x);
    x.set(B21);
    assert!(B21 == x);
    x = 0;
    x.set(B22);
    assert!(B22 == x);
    x.set(B22);
    assert!(B22 == x);
    x = 0;
    x.set(B23);
    assert!(B23 == x);
    x.set(B23);
    assert!(B23 == x);
    x = 0;
    x.set(B24);
    assert!(B24 == x);
    x.set(B24);
    assert!(B24 == x);
    x = 0;
    x.set(B25);
    assert!(B25 == x);
    x.set(B25);
    assert!(B25 == x);
    x = 0;
    x.set(B26);
    assert!(B26 == x);
    x.set(B26);
    assert!(B26 == x);
    x = 0;
    x.set(B27);
    assert!(B27 == x);
    x.set(B27);
    assert!(B27 == x);
    x = 0;
    x.set(B28);
    assert!(B28 == x);
    x.set(B28);
    assert!(B28 == x);
    x = 0;
    x.set(B29);
    assert!(B29 == x);
    x.set(B29);
    assert!(B29 == x);
    x = 0;
    x.set(B30);
    assert!(B30 == x);
    x.set(B30);
    assert!(B30 == x);
    x = 0;
    x.set(B31);
    assert!(B31 == x);
    x.set(B31);
    assert!(B31 == x);
}

#[test]
fn set_u16() {
use crate::{bit_u16::*, BitOp as _};
    let mut x = 0u16;
    x = 0;
    x.set(B0);
    assert!(B0 == x);
    x.set(B0);
    assert!(B0 == x);
    x = 0;
    x.set(B1);
    assert!(B1 == x);
    x.set(B1);
    assert!(B1 == x);
    x = 0;
    x.set(B2);
    assert!(B2 == x);
    x.set(B2);
    assert!(B2 == x);
    x = 0;
    x.set(B3);
    assert!(B3 == x);
    x.set(B3);
    assert!(B3 == x);
    x = 0;
    x.set(B4);
    assert!(B4 == x);
    x.set(B4);
    assert!(B4 == x);
    x = 0;
    x.set(B5);
    assert!(B5 == x);
    x.set(B5);
    assert!(B5 == x);
    x = 0;
    x.set(B6);
    assert!(B6 == x);
    x.set(B6);
    assert!(B6 == x);
    x = 0;
    x.set(B7);
    assert!(B7 == x);
    x.set(B7);
    assert!(B7 == x);
    x = 0;
    x.set(B8);
    assert!(B8 == x);
    x.set(B8);
    assert!(B8 == x);
    x = 0;
    x.set(B9);
    assert!(B9 == x);
    x.set(B9);
    assert!(B9 == x);
    x = 0;
    x.set(B10);
    assert!(B10 == x);
    x.set(B10);
    assert!(B10 == x);
    x = 0;
    x.set(B11);
    assert!(B11 == x);
    x.set(B11);
    assert!(B11 == x);
    x = 0;
    x.set(B12);
    assert!(B12 == x);
    x.set(B12);
    assert!(B12 == x);
    x = 0;
    x.set(B13);
    assert!(B13 == x);
    x.set(B13);
    assert!(B13 == x);
    x = 0;
    x.set(B14);
    assert!(B14 == x);
    x.set(B14);
    assert!(B14 == x);
    x = 0;
    x.set(B15);
    assert!(B15 == x);
    x.set(B15);
    assert!(B15 == x);
}

#[test]
fn set_u8() {
use crate::{bit_u8::*, BitOp as _};
    let mut x = 0u8;
    x = 0;
    x.set(B0);
    assert!(B0 == x);
    x.set(B0);
    assert!(B0 == x);
    x = 0;
    x.set(B1);
    assert!(B1 == x);
    x.set(B1);
    assert!(B1 == x);
    x = 0;
    x.set(B2);
    assert!(B2 == x);
    x.set(B2);
    assert!(B2 == x);
    x = 0;
    x.set(B3);
    assert!(B3 == x);
    x.set(B3);
    assert!(B3 == x);
    x = 0;
    x.set(B4);
    assert!(B4 == x);
    x.set(B4);
    assert!(B4 == x);
    x = 0;
    x.set(B5);
    assert!(B5 == x);
    x.set(B5);
    assert!(B5 == x);
    x = 0;
    x.set(B6);
    assert!(B6 == x);
    x.set(B6);
    assert!(B6 == x);
    x = 0;
    x.set(B7);
    assert!(B7 == x);
    x.set(B7);
    assert!(B7 == x);
}

